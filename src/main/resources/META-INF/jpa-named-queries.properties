user.login-details=select u.txt_login_id as txtLoginId, u.txt_user_signature as txtUserSignature, ifnull(u.flg_force_passwd_chg, 'N') as FlgForcePasswdChg, ifnull(u.dat_last_passwd_chg, g.dat_system_asof) as DatLastPasswdChg, if(datediff(g.dat_system_asof, u.dat_last_passwd_chg) >= g.num_days_passwd_expire, 'Y', 'N') as FlgPasswdExpired, ifnull(u.txt_user_fname, '') as TxtUserFname, ifnull(u.txt_user_mname, '') as TxtUserMname, ifnull(u.txt_user_lname, '') as TxtUserLname, ifnull(u.txt_employee_id, '') as TxtEmployeeId, ifnull(u.cod_language, g.cod_language) as CodLanguage, ifnull(u.txt_user_email_id, '') as TxtUserEmailId, ifnull(u.txt_user_mobile_phone, '') as TxtUserMobilePhone, ifnull(u.txt_device_assigned, '') as TxtDeviceAssigned, ifnull(u.cod_user_designation, '') as CodUserDesignation, ifnull(u.txt_credit_approver_id, '') as TxtCreditApproverId, ifnull(u.txt_manager_login_id, '') as TxtManagerLoginId, ifnull(u.txt_default_reviewer_id, '') as TxtDefaultReviewerId, ifnull(u.cod_home_branch, '') as CodHomeBranch, ufIsHoliday(u.cod_home_branch) as NumIsHoliday, ifnull(u.id_parent_company_3rdparty, 0) as IdParentCompany3rdparty, ifnull(u.flg_disabled, 'N') as FlgDisabled, ifnull(u.flg_user_logged_in, 'N') as FlgUserLoggedIn, ifnull(u.flg_functional_id, 'N') as FlgFunctionalId, ifnull(u.num_failed_pwd, 0) as NumFailedPwd, if(ifnull(u.num_failed_pwd, 0) > :numFailedPwd, 'Y', 'N') as NumFailedPwdLimitExceeded, if(u.dat_profile_expiry < g.dat_system_asof, 'Y', 'N') as FlgProfileExpired, ifnull(u.num_time_start_wkday, 800) as NumTimeStartWkday, ifnull(u.num_time_end_wkday, 2000) as NumTimeEndWkday, ifnull(u.num_time_start_wkend, 900) as NumTimeStartWkend, ifnull(u.num_time_end_wkend, 1400) as NumTimeEndWkend, ifnull(u.num_time_start_holiday, 900) as NumTimeStartHoliday, ifnull(u.num_time_end_holiday, 1400) as NumTimeEndHoliday, u.cod_2fa_question_1 as Cod2faQuestion1, u.txt_2fa_answer_1 as Txt2faAnswer1, u.cod_2fa_question_2 as Cod2faQuestion2, u.txt_2fa_answer_2 as Txt2faAnswer2, u.cod_2fa_question_3 as Cod2faQuestion3, u.txt_2fa_answer_3 as Txt2faAnswer3, u.cod_2fa_question_4 as Cod2faQuestion4, u.txt_2fa_answer_4 as Txt2faAnswer4, u.cod_2fa_question_5 as Cod2faQuestion5, u.txt_2fa_answer_5 as Txt2faAnswer5, ifnull(u.cod_home_module, 'LOS') as CodHomeModule, u.cod_home_menu as CodHomeMenu, ifnull(u.enu_user_gender, 'N/A') as EnuUserGender, ifnull(u.dat_user_birth, '1900-01-01') as DatUserBirth, ifnull(u.txt_parent_company_name, '') as TxtParentCompanyName, ifnull(u.flg_parent_company_verified, 'N') as FlgParentCompanyVerified, u.dat_time_parent_company_verified as DatTimeParentCompanyVerified, ifnull(u.cod_department, '') as CodDepartment, ifnull(u.dat_last_login, g.dat_system_asof) as DatLastLogin, ifnull(u.dat_profile_expiry, g.dat_next_monthend) as DatProfileExpiry from  sec_user_master u, sys_global_vars g where u.cod_rec_status = 'A' and   g.cod_rec_status = 'A' and   txt_login_id=:userId and   txt_user_signature=:userSignature
user.last-login=SELECT txt_login_id as TxtLoginId,  dat_time_login as DatTimeLogin,  flg_success as FlgSuccess,  ifnull(txt_ip_address_source, '') as TxtIpAddressSource,  txt_browser_used as TxtBrowserUsed,  txt_os_used as TxtOsUsed,  txt_login_fail_reason as TxtLoginFailReason,  TIMESTAMPDIFF(MINUTE, dat_time_login, NOW()) AS Difference from sec_user_access_log where txt_login_id = :txtLoginId order by dat_time_login desc limit 1
user.sys-install-modules=Select m.cod_module as CodModule,  m.txt_module_name as TxtModuleName,  m.txt_module_home_page as TxtModuleHomePage,  m.txt_module_logo_file as TxtModuleLogoFile,  m.txt_bank_name as TxtBankName,  m.dat_license_start as DatLicenseStart,  m.dat_license_expire as DatLicenseExpire,  m.txt_module_param_1 as TxtModuleParam1,  m.txt_module_param_2 as TxtModuleParam2,  m.txt_module_param_3 as TxtModuleParam3,  m.txt_module_key as TxtModuleKey,  g.bin_bank_logo_file as BinBankLogoFile  from sys_install_modules m , sys_global_vars g  where g.txt_bank_name = m.txt_bank_name  and g.dat_system_asof between m.dat_license_start and m.dat_license_expire  and g.cod_rec_status = 'A'  and cod_module = :codeModule
user.menu-params=Select distinct m.txt_menu_param_1 as TxtMenuParam1,  m.txt_menu_param_2 as TxtMenuParam2,  m.txt_menu_param_3 as TxtMenuParam3  from sec_menu_options m, sec_user_x_roles uxr, sec_user_role_menus urm  where m.cod_menu_option = :codMenuOption  and uxr.txt_login_id = :txtLoginId  and m.cod_menu_option = urm.cod_menu_option  and uxr.cod_user_role = urm.cod_user_role  and m.cod_rec_status = 'A' and uxr.cod_rec_status = 'A' and urm.cod_rec_status = 'A' and ifnull(m.flg_is_root_menu, 'N') = 'N'  and m.cod_menu_option not in (select cod_parent_menu_option from sec_menu_options where cod_rec_status = 'A')
user.span-of-control=select  u.cod_org_unit as CodOrgUnit, o.txt_org_unit_name as TxtOrgUnitName from    sec_user_span_derived u, sys_org_chart o where   o.cod_org_unit = u.cod_org_unit and     o.cod_rec_status = 'A' and     txt_login_id = :txtLoginId
user.managed=select l.txt_login_id as TxtLoginId, l.txt_user_fname as TxtUserFname, l.txt_user_lname as TxtUserLname from 	sec_user_span_derived o, sec_user_master l where 	o.cod_org_unit = l.cod_home_branch and 	l.cod_rec_status = 'A' and 	o.txt_login_id = :txtLoginId
user.centers-managed=select l.id_center as IdCenter, l.txt_center_name as TxtCenterName   from sec_user_span_derived o, lon_center_master l   where o.cod_org_unit = l.cod_center_branch   and l.cod_rec_status = 'A'   and o.txt_login_id = :txtLoginId
user.messages=select num_message as NumMessage, txt_user_message as TxtUserMessage  from sys_user_messages  where cod_language = :lang  and cod_rec_status = 'A' order by num_message
user.update-login-success=UPDATE sec_user_master SET flg_user_logged_in = 'Y', num_failed_pwd = 0, dat_last_login = date_format(now(), '%Y-%m-%d') WHERE txt_login_id=:txtLoginId
user.update-login-failed=UPDATE sec_user_master SET flg_disabled = if(num_failed_pwd > :numFailedPwd, 'Y','N'), num_failed_pwd = if(num_failed_pwd > :numFailedPwd + 1, num_failed_pwd, num_failed_pwd + 1)  WHERE txt_login_id=:txtLoginId
user.log.access.request=REPLACE INTO sec_user_access_log  ( txt_login_id , dat_time_login , flg_success , txt_login_fail_reason , txt_ip_address_source , txt_browser_used , txt_os_used , txt_user_agent_string)  VALUES (:txtLoginId, now(), :flgSuccess, :txtLoginFailReason, :txtIpAddressSource, :txtBrowserUsed, :txtOsUsed, :txtUserAgentString)